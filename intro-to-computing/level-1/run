#!/opt/pwn.college/python

import os
import pathlib
import re
import sys

sys.path.insert(0, "/challenge/.lib")
from liblearn import render, run, shell_run, forced_shell_run, interactive, shell_prompt


SYS_exit = 60

if len(sys.argv) == 2:
    path = pathlib.Path(sys.argv[1])
    if not (path.exists() and path.is_file()):
        print("That's not a valid path, try again!")
        print("If you are just starting, run the program without any arguments.")
        sys.exit(1)

    if path.stat().st_mode & 0o111 == 0:
        print("That isn't an executable program, try again!")
        sys.exit(1)

    if path.stat().st_uid != os.getuid():
        print("That program isn't yours, try again!")
        sys.exit(1)

    result = run([str(path.absolute())])
    if result.returncode < 0:
        print("That program did not gracefully exit, try again!")
        sys.exit(1)

    flag = pathlib.Path("/flag").read_text()
    print(f"\nCongratulations! Here is your flag: {flag}")
    sys.exit(0)

render("1-registers.md", target_rax=SYS_exit)
while True:
    instruction_asm = input("Instruction: ")
    match = re.match(r"^\s*(\w+)\s+(\w+)\s*,\s*(\w+)\s*$", instruction_asm)
    if not match:
        print("That instruction doesn't look quite right, try again!")
        continue
    op, dst, src = match.groups()
    if op != "mov":
        print(f"That instruction mnemonic ({op}) operation doesn't look quite right, try again!")
        continue
    if dst != "rax":
        print(f"That instruction destination ({dst}) doesn't look quite right, try again!")
        continue
    try:
        value = int(src, 16 if src.startswith("0x") else 10)
        assert value == SYS_exit
    except:
        print(f"That instruction source value ({src}) doesn't look quite right, try again!")
        continue
    print("That's correct!")
    break

render("2-assembly.md", instruction_asm=instruction_asm)
while True:
    command, result = shell_run()
    if not pathlib.Path("program.s").is_file():
        print("You didn't create a program.s file, try again!")
        continue
    program_lines = [line.strip() for line in open("program.s").read().splitlines() if line.strip()]
    if ".intel_syntax noprefix" not in program_lines:
        print("You didn't specify the intel syntax, try again!")
        continue
    if ".global _start" not in program_lines:
        print("You didn't specify that the _start label should be global, try again!")
        continue
    if "_start:" not in program_lines:
        print("You didn't specify the _start label, try again!")
        continue
    if instruction_asm not in program_lines:
        print("You didn't specify the instruction, try again!")
        continue
    if any(";" in line for line in program_lines) or len(program_lines) != 4:
        print("You didn't specify the program correctly, try again!")
        continue
    break

render("3-assemble.md")
while True:
    forced_shell_run("as -o program.o program.s", command_name="assembler")
    if not pathlib.Path("program.o").is_file():
        print("You didn't create a program.o file, try again!")
        continue
    break

render("4-hexdump.md")
forced_shell_run("hexdump -C program.o", command_name="hexdump")

render("5-objdump.md")
forced_shell_run("objdump -d -Mintel program.o", command_name="objdump")
print()
while True:
    machine_code = input("Machine Code: ").strip()
    if not re.match(r"^([0-9a-f]{2}\s+)*[0-9a-f]{2}$", machine_code):
        print("That's not the correct format, try again!")
        continue
    if machine_code != f"48 c7 c0 {SYS_exit:02x} 00 00 00":
        print("That's not correct, try again!")
        continue
    print("That's correct!")
    break

render("6-link.md")
while True:
    forced_shell_run("ld -o program program.o", command_name="linker")
    if not pathlib.Path("program").is_file():
        print("You didn't create a program file, try again!")
        continue
    break
forced_shell_run("hexdump -C program", command_name="hexdump")
forced_shell_run("objdump -d -Mintel program", command_name="objdump")

render("7-readelf.md")
forced_shell_run("readelf -h program", command_name="readelf")
print()
while True:
    entrypoint = input("Entrypoint: ")
    try:
        entrypoint = int(entrypoint, 16 if entrypoint.startswith("0x") else 10)
        assert entrypoint == 0x401000
    except:
        print("That's not correct, try again!")
        continue
    print("That's correct!")
    break

render("8-run.md")
forced_shell_run("./program", command_name="program")

render("9-crashing.md", target_rax=SYS_exit)
while True:
    command, result = shell_run()
    print()
    core_name = input("Core filename: ")
    if "core" not in core_name or not pathlib.Path(core_name).is_file():
        print("That core file doesn't exist, try again!")
        continue
    print("That's correct!")
    break

render("10-debug.md", target_rax=SYS_exit)
while True:
    said = input("Say it: ")
    if said != "I will debug this!":
        print("That's not correct, try again!")
        continue
    print("That's correct!")
    break

render("11-gdb.md")
while True:
    command = shell_prompt()
    if command == "gdb -q program":
        break
    print("Please run the gdb command as specified, try again!")
forced_gdb_commands = [
    ("starti", "start the program"),
    ("x/i $rip", "print the instruction the CPU is about to execute"),
    ("p $rax", "print the initial value of RAX"),
    ("si", "execute one instruction"),
    ("p $rax", "print the new value of RAX"),
    ("x/i $rip", "print the next instruction the CPU is about to execute"),
    ("si", "execute one more instruction"),
    ("quit", "quit gdb"),
    ("y", "quit gdb")
]
gdb_prompt = "(gdb) "
quit_prompt =  "Quit anyway? (y or n) "
for interaction, (forced_gdb_command, advice) in zip(interactive(command, (gdb_prompt, quit_prompt)), forced_gdb_commands):
    while True:
        command = input()
        if command == forced_gdb_command:
            break
        print(f"Please {advice} as specified, try again!")
        print(gdb_prompt, end="", flush=True)
    interaction.write(f"{command}\n".encode())
print()
for when, correct_value in (("before", 0), ("after", SYS_exit)):
    while True:
        value = input(f"Value of RAX {when} executing the instruction: ")
        try:
            value = int(value, 16 if value.startswith("0x") else 10)
            assert value == correct_value
        except:
            print("That's not correct, try again!")
            continue
        print("That's correct!")
        break

render("12-kernel.md", challenge_path=sys.argv[0])
